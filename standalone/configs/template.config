net {
  type = mainnet
}

storage {
  # Directory for storing persistent data
  db.version = 2,
  db.engine = "ROCKSDB",
  db.sync = false,
  db.directory = "database",
  index.directory = "index",
  transHistory.switch = "on",
  # You can custom these 14 databases' configs:
  # account, account-index, asset-issue, block, block-index,
  # block_KDB, peers, properties, recent-block, trans,
  # utxo, votes, witness, witness_schedule.
  # Otherwise, db configs will remain defualt and data will be stored in
  # the path of "output-directory" or which is set by "-d" ("--output-directory").
  # Attention: name is a required field that must be set !!!
  properties = [
    //    {
    //      name = "account",
    //      path = "storage_directory_test",
    //      createIfMissing = true,
    //      paranoidChecks = true,
    //      verifyChecksums = true,
    //      compressionType = 1,        // compressed with snappy
    //      blockSize = 4096,           // 4  KB =         4 * 1024 B
    //      writeBufferSize = 10485760, // 10 MB = 10 * 1024 * 1024 B
    //      cacheSize = 10485760,       // 10 MB = 10 * 1024 * 1024 B
    //      maxOpenFiles = 100
    //    },
    //    {
    //      name = "account-index",
    //      path = "storage_directory_test",
    //      createIfMissing = true,
    //      paranoidChecks = true,
    //      verifyChecksums = true,
    //      compressionType = 1,        // compressed with snappy
    //      blockSize = 4096,           // 4  KB =         4 * 1024 B
    //      writeBufferSize = 10485760, // 10 MB = 10 * 1024 * 1024 B
    //      cacheSize = 10485760,       // 10 MB = 10 * 1024 * 1024 B
    //      maxOpenFiles = 100
    //    },
  ]
  needToUpdateAsset = true
  //dbsettings is needed when using rocksdb as the storage implement (db.version=2 and db.engine="ROCKSDB").
  //we'd strongly recommend that do not modify it unless you know every item's meaning clearly.
  dbSettings = {
    levelNumber = 7
    //compactThreads = 32
    blocksize = 64  // n * KB
    maxBytesForLevelBase = 256  // n * MB
    maxBytesForLevelMultiplier = 10
    level0FileNumCompactionTrigger = 4
    targetFileSizeBase = 256  // n * MB
    targetFileSizeMultiplier = 1
#    enableStatistics = true   // for ROCKSDB monitoring
  }
  //backup settings when using rocks db as the storage implement (db.version=2 and db.engine="ROCKSDB").
  //if you want to use the backup plugin, please confirm set the db.version=2 and db.engine="ROCKSDB" above.
  backup = {
    enable = false  // indicate whether enable the backup plugin
    propPath = "prop.properties" // record which bak directory is valid
    bak1path = "bak1/database" // you must set two backup directories to prevent application halt unexpected(e.g. kill -9).
    bak2path = "bak2/database"
    frequency = 10000   // indicate backup db once every 10000 blocks processed.
  }
}
node.discovery = {
  enable = true
  persist = true
  bind.ip = ""
  external.ip = null
}
node.backup {
  # my priority, each member should use different priority
  priority = 8
  # udp listen port, each member should have the save configuration
  port = 10001
  # time interval to send keepAlive message, each member should have the save configuration
  keepAliveInterval = 3000
  # peer's ip list, can't contain mine
  members = [
    # "ip",
    # "ip"
  ]
}
crypto {
  engine = "eckey"
}

#node.metrics {
#    storageEnable = true
#    influxdb = {
#        ip = "172.26.2.154"
#        port = 8086
#        database = "metrics"
#        metricsReportInterval = 10
#    }
#}

node {
  # enable metrics
 # metricsEnable = true
  # trust node for solidity node
  # trustNode = "ip:port"
  trustNode = "127.0.0.1:60061"
  # expose extension api to public or not
  walletExtensionApi = true
  listen.port = 16666
  connection.timeout = 2
  tcpNettyWorkThreadNum = 0
  udpNettyWorkThreadNum = 1
  # Number of validate sign thread, default availableProcessors / 2
  # validateSignThreadNum = 16
  connectFactor = 0.3
  activeConnectFactor = 0.1
  maxActiveNodes = 30
  maxActiveNodesWithSameIp = 2
  maxHttpConnectNumber = 50
  minParticipationRate = 0
  # agreeNodeCount = 16
  # check the peer data transfer ,disconnect factor
  disconnectNumberFactor = 0.4
  maxConnectNumberFactor = 0.8
  receiveTcpMinDataLength = 2048
  isOpenFullTcpDisconnect = true
  p2p {
    version = 20220222  # 888888: mainnet; 666666: vpioneer-testnet
  }
  active = [
    # Active establish connection in any case
    # Sample entries:
    # "ip:port",
    # "ip:port"
  ]
  passive = [
    # Passive accept connection in any case
    # Sample entries:
    # "ip:port",
    # "ip:port"
  ]
  fastForward = [
    # "ip:port",
    # "ip:port"
  ]
  http {
    fullNodeEnable = true
    fullNodePort = 7080
    solidityEnable = true
    solidityPort = 7081
    PBFTPort = 7082
  }
  rpc {
    port = 60061
    solidityPort = 60071
    PBFTPort = 60081
    # Number of gRPC thread, default availableProcessors / 2
    # thread = 16
    # The maximum number of concurrent calls permitted for each incoming connection
    # maxConcurrentCallsPerConnection =
    # The HTTP/2 flow control window, default 1MB
    # flowControlWindow =
    # Connection being idle for longer than which will be gracefully terminated
    maxConnectionIdleInMillis = 60000
    # Connection lasting longer than which will be gracefully terminated
    # maxConnectionAgeInMillis =
    # The maximum message size allowed to be received on the server, default 4MB
    # maxMessageSize =
    # The maximum size of header list allowed to be received, default 8192
    # maxHeaderListSize =
    # Transactions can only be broadcast if the number of effective connections is reached.
    minEffectiveConnection = 0
  }
  # number of solidity thread in the FullNode.
  # If accessing solidity rpc and http interface timeout, could increase the number of threads,
  # The default value is the number of cpu cores of the machine.
  #solidity.threads = 8
  # Limits the maximum percentage (default 75%) of producing block interval
  # to provide sufficient time to perform other operations e.g. broadcast block
  # blockProducedTimeOut = 75
  # Limits the maximum number (default 700) of transaction from network layer
  # netMaxTrxPerSecond = 700
  # open the history query APIs(http&GRPC) when node is a lite fullNode,
  # like {getBlockByNum, getBlockByID, getTransactionByID...}.
  # default: false.
  # note: above APIs may return null even if blocks and transactions actually are on the blockchain
  # when opening on a lite fullnode. only open it if the consequences being clearly known
  # openHistoryQueryWhenLiteFN = false
}
## rate limiter config
rate.limiter = {
  # Every api could be set a specific rate limit strategy. Three strategy are supported:GlobalPreemptibleAdapter、IPQPSRateLimiterAdapte、QpsRateLimiterAdapter
  # GlobalPreemptibleAdapter: permit is the number of preemptible resource, every client must apply one resourse
  #       before do the request and release the resource after got the reponse automaticlly. permit should be a Integer.
  # QpsRateLimiterAdapter: qps is the average request count in one second supported by the server, it could be a Double or a Integer.
  # IPQPSRateLimiterAdapter: similar to the QpsRateLimiterAdapter, qps could be a Double or a Integer.
  # If do not set, the "default strategy" is set.The "default startegy" is based on QpsRateLimiterAdapter, the qps is set as 10000.
  #
  # Sample entries:
  #
  http = [
    #  {
    #    component = "GetNowBlockServlet",
    #    strategy = "GlobalPreemptibleAdapter",
    #    paramString = "permit=1"
    #  },
    #  {
    #    component = "GetAccountServlet",
    #    strategy = "IPQPSRateLimiterAdapter",
    #    paramString = "qps=1"
    #  },
    #  {
    #    component = "ListWitnessesServlet",
    #    strategy = "QpsRateLimiterAdapter",
    #    paramString = "qps=1"
    #  }
  ],
  rpc = [
    #  {
    #    component = "protocol.Wallet/GetBlockByLatestNum2",
    #    strategy = "GlobalPreemptibleAdapter",
    #    paramString = "permit=1"
    #  },
    #  {
    #    component = "protocol.Wallet/GetAccount",
    #    strategy = "IPQPSRateLimiterAdapter",
    #    paramString = "qps=1"
    #  },
    #  {
    #    component = "protocol.Wallet/ListWitnesses",
    #    strategy = "QpsRateLimiterAdapter",
    #    paramString = "qps=1"
    #  },
  ]
}
seed.node = {
  # List of the seed nodes
  # Seed nodes are stable full nodes
  # example:
  # ip.list = [
  #   "ip:port",
  #   "ip:port"
  # ]
  ip.list = [
  ]
}
genesis.block = {
  # Reserve balance
  assets = [
      {
        accountName = "Avalon"
        accountType = "AssetIssue"
        address = "VEjv96xxrfr9NBacovAzWuX5Vj5npZ9EuS"
        balance = "0"
      },
      {
        accountName = "Galaxy"
        accountType = "AssetIssue"
        address = "VK9wBMLcFWEjD8Bytnt8F4PCJ5nMrvtWdx"
        balance = "0"
      },
      {
        accountName = "Singularity"
        accountType = "AssetIssue"
        address = "VBxXU3YBqD2BVi7AkB94jhyPhNdr2ifEX6"
        balance = "-9223372036854775808"
      },
      {
        accountName = "PrivateSale"
        accountType = "AssetIssue"
        address = "VWUsnuNPwtNp6zTwZ16iVbj95BsamHjK1Y"
        balance = "21500000000000"
      },
      {
        accountName = "Team"
        accountType = "AssetIssue"
        address = "VBrW9UhsVQsPxCLL8LuyaHJWNU4StXcJ3Z"
        balance = "5000000000000"
      },
      {
        accountName = "DAO"
        accountType = "AssetIssue"
        address = "VZb4vVsp1ASj4b1qusapHoYnykRZimim9P"
        balance = "10000000000000"
      },
      {
        accountName = "Dev"
        accountType = "AssetIssue"
        address = "VKXSB6HMH4bAjzJaEkTCn3PsqiZBWge3S8"
        balance = "3000000000000"
      },
      {
        accountName = "Promotion"
        accountType = "AssetIssue"
        address = "VUvVrXkhjqtPXYRRN2QUjoXQkTH9oF9oEw"
        balance = "100000000000000"
      }
  ]
  witnesses = [
    {
      address: VRB3tD3UVcENTKiSxsRRPDQ3DPRAR1VtEE,
      url = "http://127.0.0.1",
      voteCount = 188888
    }
  ]
  timestamp = "0" # GenesisBlock Creation time 1970-01-01 00:00:00
  parentHash = "0xc186d3bdf3b416c05224972a46716095cce01ea54877d9d0bd2201afe1eb0d84"
}
// Optional.The default is empty.
// It is used when the witness account has set the witnessPermission.
// When it is not empty, the localWitnessAccountAddress represents the address of the witness account,
// and the localwitness is configured with the private key of the witnessPermissionAddress in the witness account.
// When it is empty,the localwitness is configured with the private key of the witness account.
# localWitnessAccountAddress =
localwitness = [
b7c2a186ad04fee26d374907e9357f36e4f6a5b35b82b3781455207b6cb77669
]

# localwitnesskeystore = [
# ]

block = {
  needSyncCheck = false
  maintenanceTimeInterval = 300000
  proposalExpireTime = 1800000   // 2 hour: 7200000(ms)
}
# Transaction reference block, default is "head", configure to "solid" can avoid TaPos error
# trx.reference.block = "head" // head;solid;
# This property sets the number of milliseconds after the creation of the transaction that is expired, default value is  60000.
# trx.expiration.timeInMilliseconds = 60000
vm = {
  supportConstant = true
  minTimeRatio = 0.0
  maxTimeRatio = 5.0
  saveInternalTx = true
  vmTrace = false
  # In rare cases, transactions that will be within the specified maximum execution time (default 10(ms)) are re-executed and packaged
  # longRunningTime = 10
}

committee = {
  allowCreationOfContracts = 1
  allowSameTokenName = 1
  allowDelegateResource = 1
  allowVvmTransferVrc10 = 1
  allowMultiSign = 1
  allowAdaptiveEntropy = 0
  allowProtoFilterNum = 0
  allowAccountStateRoot = 0
  allowVvmConstantinople = 1
  changedDelegation = 1
  allowVvmSolidity059 = 1
  allowVvmIstanbul = 1
}

event.subscribe = {
  native = {
    useNativeQueue = false // if true, use native message queue, else use event plugin.
    bindport = 6666 // bind port
    sendqueuelength = 1000 //max length of send queue
  }
  path = "" // absolute path of plugin
  server = "" // target server address to receive event triggers
  dbconfig = "" // dbname|username|password
  contractParse = true,
  topics = [
    {
      triggerName = "block" // block trigger, the value can't be modified
      enable = false
      topic = "block" // plugin topic, the value could be modified
    },
    {
      triggerName = "transaction"
      enable = false
      topic = "transaction"
    },
    {
      triggerName = "contractevent"
      enable = false
      topic = "contractevent"
    },
    {
      triggerName = "contractlog"
      enable = false
      topic = "contractlog"
    },
    {
      triggerName = "solidity" // solidity block event trigger, the value can't be modified
      enable = true            // the default value is true
      topic = "solidity"
    },
    {
      triggerName = "solidityevent"
      enable = false
      topic = "solidityevent"
    },
    {
      triggerName = "soliditylog"
      enable = false
      topic = "soliditylog"
    }
  ]
  filter = {
    fromblock = "" // the value could be "", "earliest" or a specified block number as the beginning of the queried range
    toblock = "" // the value could be "", "latest" or a specified block number as end of the queried range
    contractAddress = [
      "" // contract address you want to subscribe, if it's set to "", you will receive contract logs/events with any contract address.
    ]
    contractTopic = [
      "" // contract topic you want to subscribe, if it's set to "", you will receive contract logs/events with any contract topic.
    ]
  }
}

log.level = {
  root = "DEBUG"
}

eth = {
    gasPrice = 160000000000
}

debug.feature.effectBlockNum = {
    spreadMint.unlimitedPledge = 0
    witness.sort = 0
    ethCompatible.rlpDedup = 0
}

entropy.limit.block.num = 0
